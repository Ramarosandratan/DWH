#!/usr/bin/env pwsh

Write-Host "=== INSTALLATION DES D√âPENDANCES POUR GRAPHIQUES ===" -ForegroundColor Green
Write-Host ""

# V√©rifier que Docker est en cours d'ex√©cution
try {
    docker version | Out-Null
    Write-Host "‚úÖ Docker est disponible" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n'est pas disponible ou n'est pas d√©marr√©" -ForegroundColor Red
    exit 1
}

# V√©rifier que les conteneurs Airflow sont en cours d'ex√©cution
$containers = docker ps --format "table {{.Names}}" | Select-String "airflow"
if ($containers.Count -eq 0) {
    Write-Host "‚ùå Aucun conteneur Airflow en cours d'ex√©cution" -ForegroundColor Red
    Write-Host "D√©marrez d'abord la stack avec: .\start-ecommerce-stack.ps1" -ForegroundColor Yellow
    exit 1
}

Write-Host "üì¶ Installation des d√©pendances Python pour les graphiques..." -ForegroundColor Cyan

# Liste des packages √† installer
$packages = @(
    "matplotlib==3.7.2",
    "seaborn==0.12.2", 
    "pandas==2.0.3",
    "numpy==1.24.3"
)

# Conteneurs Airflow o√π installer les packages
$airflow_containers = @(
    "airflow-docker-airflow-scheduler-1",
    "airflow-docker-airflow-webserver-1",
    "airflow-docker-airflow-worker-1"
)

foreach ($container in $airflow_containers) {
    # V√©rifier si le conteneur existe
    $container_exists = docker ps -a --format "{{.Names}}" | Select-String -Pattern "^$container$"
    
    if ($container_exists) {
        Write-Host "üîß Installation dans $container..." -ForegroundColor Yellow
        
        foreach ($package in $packages) {
            Write-Host "  üì¶ Installation de $package..." -ForegroundColor Gray
            
            try {
                $result = docker exec $container pip install $package 2>&1
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "    ‚úÖ $package install√© avec succ√®s" -ForegroundColor Green
                } else {
                    Write-Host "    ‚ö†Ô∏è Probl√®me avec $package : $result" -ForegroundColor Yellow
                }
            } catch {
                Write-Host "    ‚ùå Erreur lors de l'installation de $package" -ForegroundColor Red
            }
        }
        
        Write-Host "‚úÖ Installation termin√©e pour $container" -ForegroundColor Green
        Write-Host ""
    } else {
        Write-Host "‚ö†Ô∏è Conteneur $container non trouv√©" -ForegroundColor Yellow
    }
}

# V√©rifier l'installation
Write-Host "üîç V√©rification de l'installation..." -ForegroundColor Cyan

$test_script = @"
import sys
try:
    import matplotlib
    import seaborn
    import pandas
    import numpy
    print('‚úÖ Tous les packages sont install√©s')
    print(f'matplotlib: {matplotlib.__version__}')
    print(f'seaborn: {seaborn.__version__}')
    print(f'pandas: {pandas.__version__}')
    print(f'numpy: {numpy.__version__}')
except ImportError as e:
    print(f'‚ùå Erreur d\'importation: {e}')
    sys.exit(1)
"@

try {
    $verification = docker exec airflow-docker-airflow-scheduler-1 python -c $test_script
    Write-Host $verification -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification" -ForegroundColor Red
}

Write-Host ""
Write-Host "üé® Configuration matplotlib pour environnement headless..." -ForegroundColor Cyan

# Configurer matplotlib pour fonctionner sans display
$matplotlib_config = @"
import matplotlib
matplotlib.use('Agg')  # Backend sans interface graphique
import matplotlib.pyplot as plt
plt.ioff()  # Mode non-interactif
print('‚úÖ Matplotlib configur√© pour environnement headless')
"@

try {
    $config_result = docker exec airflow-docker-airflow-scheduler-1 python -c $matplotlib_config
    Write-Host $config_result -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Probl√®me de configuration matplotlib" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üîÑ Red√©marrage des services Airflow..." -ForegroundColor Cyan

# Red√©marrer les services pour prendre en compte les nouvelles d√©pendances
try {
    docker-compose -f docker-compose-extended.yaml restart airflow-scheduler airflow-webserver airflow-worker 2>$null
    Write-Host "‚úÖ Services Airflow red√©marr√©s" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Probl√®me lors du red√©marrage des services" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "=== INSTALLATION TERMIN√âE ===" -ForegroundColor Green
Write-Host "Les d√©pendances pour les graphiques sont maintenant install√©es." -ForegroundColor White
Write-Host "Vous pouvez maintenant utiliser le DAG 'create_region_chart'." -ForegroundColor White
Write-Host ""